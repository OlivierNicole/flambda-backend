(* TEST
  flags = "-extension layouts_alpha"
    * bytecode
*)
(** This is code generated by [generate_mixed_blocks_code.ml]. *)

(* Helper functions for manipulating the fields of a mixed record *)
let create_string () = String.make (Random.int 100) 'a'
let create_int () = Random.int 0x3FFF_FFFF
let create_float () = Random.float Float.max_float
let create_float_u () = Stdlib__Float_u.of_float (create_float ())
let check_gen ~equal ~to_string ~message y1 y2 =
  if equal y1 y2 then () else
    failwith
      (Printf.sprintf "%s: %s <> %s" message (to_string y1) (to_string y2))

let check_string = check_gen ~equal:String.equal ~to_string:(fun x -> x)
let check_int = check_gen ~equal:Int.equal ~to_string:Int.to_string
let check_float =
  check_gen ~equal:Float.equal ~to_string:Float.to_string

(* Helper functions for testing polymorphic copying. *)

let copy_via_weak x =
  let weak = Weak.create 1 in
  Weak.set weak 0 (Some x);
  Weak.get_copy weak 0 |> Option.get

let copy_via_tag x =
  let obj = Obj.repr x in
  Obj.with_tag (Obj.tag obj) obj |> Obj.obj;; let copy_via_tag x = x

(* Helper functions for testing polymorphic operations. *)
let oc = Out_channel.open_bin "/dev/null"
exception Unexpected_success
type forget = T : _ -> forget

let try_compare x y =
  ignore (compare (T x) (T y) : int);
  ignore ((T x) = (T y) : bool)

let try_hash x =
  ignore (Hashtbl.hash x : int)

let try_marshal t = output_value oc t;;

let check_reachable_words expected actual message =
  if expected <> actual
  then failwith (Printf.sprintf "%s: %d <> %d" message expected actual)
;;

(* Type declarations *)
type t0 = { mutable str0 : string; mutable float_u1 : float# }

(* Let declarations *)
let () = print_endline "Creating values";;
let t0 : t0 = { str0 = create_string (); float_u1 = create_float_u () };;
let () = print_endline " - Doing GC";;
let () = Gc.full_major ();;

(* Copies *)
let () = print_endline "Copying values using [with] record update";;
let t_orig0 = { t0 with str0 = t0.str0 };;

(* Checks *)
  let run_checks (t0 : t0) =
  print_endline "    - Marshaling";
  try_marshal t0;
  print_endline "    - Hashing";
  try_hash t0;
  print_endline "    - Checking field values";
  check_string t0.str0 t_orig0.str0 ~message:"t0.str0";
  check_float (Stdlib__Float_u.to_float t0.float_u1) (Stdlib__Float_u.to_float t_orig0.float_u1) ~message:"t0.float_u1";
  print_endline "    - Checking [Obj.reachable_words]";
  check_reachable_words (Obj.reachable_words (Obj.repr t0)) (3 + Obj.reachable_words (Obj.repr t0.str0) + 2) "Reachable words 0";
  ();;
let () = print_endline " - Running checks";;
let () = run_checks t0;;
let () = print_endline " - Doing GC";;
let () = Gc.full_major ();;
let () = print_endline " - Running checks";;
let () = run_checks t0;;
let () = print_endline "Copying values via [Stdlib.Weak]";;
let t0 : t0 = copy_via_weak t0
let () = print_endline " - Running checks";;
let () = run_checks t0;;
let () = print_endline " - Doing GC";;
let () = Gc.full_major ();;
let () = print_endline " - Running checks";;
let () = run_checks t0;;
let () = print_endline "Copying values via [Obj.with_tag]";;
let t0 : t0 = copy_via_tag t0
let () = print_endline " - Running checks";;
let () = run_checks t0;;
let () = print_endline " - Doing GC";;
let () = Gc.full_major ();;
let () = print_endline " - Running checks";;
let () = run_checks t0;;

(* Testing local allocation *)
external opaque_ignore : ('a [@local_opt]) -> unit = "%opaque"
let go () =
  let local_ t0 : t0 = { str0 = create_string (); float_u1 = create_float_u () } in
    let module _ = struct
    let () = print_endline " - Doing GC";;
    let () = Gc.full_major ();;
  end in
  opaque_ignore t0;
  ();;
let () = print_endline "Testing local allocations";;
let () = go ();;
